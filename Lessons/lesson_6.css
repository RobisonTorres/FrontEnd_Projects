/* Normalize your box model by creating a * selector and setting 
the box-sizing property to border-box as the value.*/
* {box-sizing: border-box;}

/* Your images are too big. Create a .gallery img selector to target them.
Give them all a width of 100% and a max-width of 350px so they shrink as 
needed but don't get too big. Also set the height property to 300px to 
keep your images a uniform size*/
.gallery img {width: 100%;
    max-width: 350px;
    height: 300px;

/* Smooth out your images a bit by giving the .gallery img selector a border-radius
property with 10px set as the value.*/ 
    border-radius: 10px;}
    
body {margin: 0;
    font-family: sans-serif;
    background-color: #f5f6f7}

/* Align your .header text in the center. Make the text uppercase using the 
text-transform property with uppercase as the value. Give it a padding of 32px 
on all sides. Set the background to #0a0a23 and the text to #fff as the color values.
Add a border-bottom with 4px solid #fdb347 as the value.*/
.header {text-align: center;
    text-transform: uppercase;
    padding: 32px;
    background-color: #0a0a23;
    color: #fff;
    border-bottom: 4px solid #fdb347;
}

/* Flexbox is a one-dimensional CSS layout that can control the way items are spaced 
out and aligned within a container. To use it, give an element a display property of flex.
This will make the element a flex container. Any direct children of a flex container 
are called flex items. Create a .gallery selector and make it a flex container.
*/

/* The flex-wrap property determines how your flex items behave when the flex 
container is too small. Setting it to wrap will allow the items to wrap to the next 
row or column. nowrap (default) will prevent your items from wrapping and shrink them if needed.
Make it so your flex items wrap to the next row when they run out of space.*/
.gallery {display: flex;
    flex-direction: row;
    flex-wrap: wrap;

/* The justify-content property determines how the items inside a flex container 
are positioned along the main axis, affecting their position and the space around them.*/
    justify-content: center;

/* The align-items property positions the flex content along the cross axis. In this case,
with your flex-direction set to row, your cross axis would be vertical. To vertically 
center your images, give your .gallery selector an align-items property with center as the value.
*/
    align-items: center;

/* Give your .gallery selector a padding property set to 20px 10px to create some space 
around the container. Then, give it a max-width of 1400px and add a margin of 0 auto to center it.*/
    padding: 20PX 10PX;
    max-width: 1400px;
    margin: 0 auto;

/* Give your .gallery img selector the object-fit property and set it to cover. 
This will tell the image to fill the img container while maintaining aspect ratio,
resulting in cropping to fit.*/
    object-fit: cover;

/* Your images need some space between them. The gap CSS shorthand property 
sets the gaps, also knowns as gutters, between rows and columns.*/
    gap: 16px;}

/* The ::after pseudo-element creates an element that is the last child of the 
selected element. We can use it to add an empty element after the last image. 
If we give it the same width as the images it will push the last image to the 
left when the gallery is in a two-column layout. Right now, it is in the center 
because we set justify-content: center on the flex container.*/

/* Create a new selector using an ::after pseudo-element on the .gallery element.
Add a content property set to an empty string "" and 350px set for the width property.*/
.gallery::after {content:"";
    width: 350px;}
